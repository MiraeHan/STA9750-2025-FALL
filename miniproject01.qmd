---
title: "Exploring the Most Popular Programming on Netflix"
subtitle: "Exploring Netflix Top-10 Data"
author: Mirae Han
date: "`r format(Sys.time(), '%B %d, %Y')`"
format: 
  html: 
    code-tools: true
    code-fold: true
    toc: true
    toc-location: right
    number-sections: true
    toc-depth: 3
execute:
  eval: true
csl: apa.csl
---

# Data Analyst's Summary

## Key Facts

* 1. Netflix currently operates in **94 different countries** around the world, offering a wide variety of shows and movies tailored to local audiences.

```{r, echo=TRUE, message=FALSE, warning=FALSE}
#Load Packages

if(!require("tidyverse")) install.packages("tidyverse")
library(readr)
library(dplyr)
library(stringr)
library(DT)

#Acquire Data

if(!dir.exists(file.path("data", "mp01"))){
    dir.create(file.path("data", "mp01"), showWarnings=FALSE, recursive=TRUE)
}

GLOBAL_TOP_10_FILENAME <- file.path("data", "mp01", "global_top10_alltime.csv")

if(!file.exists(GLOBAL_TOP_10_FILENAME)){
    download.file("https://www.netflix.com/tudum/top10/data/all-weeks-global.tsv", 
                  destfile=GLOBAL_TOP_10_FILENAME)
}

COUNTRY_TOP_10_FILENAME <- file.path("data", "mp01", "country_top10_alltime.csv")

if(!file.exists(COUNTRY_TOP_10_FILENAME)){
    download.file("https://www.netflix.com/tudum/top10/data/all-weeks-countries.tsv", 
                  destfile=COUNTRY_TOP_10_FILENAME)
}

#Read files

GLOBAL_TOP_10 <- read_tsv(
  GLOBAL_TOP_10_FILENAME, na = "N/A", show_col_types = FALSE)

COUNTRY_TOP_10 <- read_tsv(
  COUNTRY_TOP_10_FILENAME,na = "N/A", show_col_types = FALSE)


#Formatted


format_titles <- function(df){
    colnames(df) <- str_replace_all(colnames(df), "_", " ") |> str_to_title()
    df
}

#Exploratory Questions

#Q1
countries_n <- COUNTRY_TOP_10 |>
  summarize(n_countries = n_distinct(country_name))


```





* 2. The non-English-language film that has spent the most cumulative weeks in the global Top 10 is Squid Game: Season 1, which remained on the list for **32 weeks** in total.

```{r, echo=TRUE, message=FALSE, warning=FALSE}
#Load Packages

if(!require("tidyverse")) install.packages("tidyverse")
library(readr)
library(dplyr)
library(stringr)
library(DT)

#Acquire Data

if(!dir.exists(file.path("data", "mp01"))){
    dir.create(file.path("data", "mp01"), showWarnings=FALSE, recursive=TRUE)
}

GLOBAL_TOP_10_FILENAME <- file.path("data", "mp01", "global_top10_alltime.csv")

if(!file.exists(GLOBAL_TOP_10_FILENAME)){
    download.file("https://www.netflix.com/tudum/top10/data/all-weeks-global.tsv", 
                  destfile=GLOBAL_TOP_10_FILENAME)
}

#Read files

GLOBAL_TOP_10 <- read_tsv(
  GLOBAL_TOP_10_FILENAME, na = "N/A", show_col_types = FALSE)


#Formatted


format_titles <- function(df){
    colnames(df) <- str_replace_all(colnames(df), "_", " ") |> str_to_title()
    df
}

#Exploratory Questions

#Q2

GLOBAL_TOP_10 |> 
  filter(str_detect(category, "Non-English")) |>
  slice_max(cumulative_weeks_in_top_10, n = 1, with_ties = FALSE) |>
  mutate(`runtime_(minutes)` = round(60 * runtime)) |>
  select(-season_title, -runtime) |>
  format_titles() |>
  datatable(options = list(searching = FALSE, info = FALSE)) |>
  formatRound(c('Weekly Hours Viewed', 'Weekly Views'))

```





* 3. The longest program to have appeared in the Netflix global Top 10 is Until You Burn: Season 1, with an estimated total runtime of approximately 2,855 minutes.

```{r, echo=TRUE, message=FALSE, warning=FALSE}
#Load Packages

if(!require("tidyverse")) install.packages("tidyverse")
library(readr)
library(dplyr)
library(stringr)
library(DT)

#Acquire Data

if(!dir.exists(file.path("data", "mp01"))){
    dir.create(file.path("data", "mp01"), showWarnings=FALSE, recursive=TRUE)
}

GLOBAL_TOP_10_FILENAME <- file.path("data", "mp01", "global_top10_alltime.csv")

if(!file.exists(GLOBAL_TOP_10_FILENAME)){
    download.file("https://www.netflix.com/tudum/top10/data/all-weeks-global.tsv", 
                  destfile=GLOBAL_TOP_10_FILENAME)
}

#Read files

GLOBAL_TOP_10 <- read_tsv(
  GLOBAL_TOP_10_FILENAME, na = "N/A", show_col_types = FALSE)


#Formatted


format_titles <- function(df){
    colnames(df) <- str_replace_all(colnames(df), "_", " ") |> str_to_title()
    df
}

#Exploratory Questions

#Q3
GLOBAL_TOP_10 |> 
  slice_max(runtime, n = 1, with_ties = FALSE) |>
  mutate(`runtime_(minutes)` = round(60 * runtime)) |>
  select(-season_title, -runtime) |>
  format_titles() |>
  datatable(options = list(searching = FALSE, info = FALSE)) |>
  formatRound(c('Weekly Hours Viewed', 'Weekly Views'))

```





* 4. For each of the four categories, the program with the most total hours of global viewership is as follows: 

```{r, echo=TRUE, message=FALSE, warning=FALSE}
#Load Packages

if(!require("tidyverse")) install.packages("tidyverse")
library(readr)
library(dplyr)
library(stringr)
library(DT)

#Acquire Data

if(!dir.exists(file.path("data", "mp01"))){
    dir.create(file.path("data", "mp01"), showWarnings=FALSE, recursive=TRUE)
}

GLOBAL_TOP_10_FILENAME <- file.path("data", "mp01", "global_top10_alltime.csv")

if(!file.exists(GLOBAL_TOP_10_FILENAME)){
    download.file("https://www.netflix.com/tudum/top10/data/all-weeks-global.tsv", 
                  destfile=GLOBAL_TOP_10_FILENAME)
}

#Read files

GLOBAL_TOP_10 <- read_tsv(
  GLOBAL_TOP_10_FILENAME, na = "N/A", show_col_types = FALSE)


#Formatted


format_titles <- function(df){
    colnames(df) <- str_replace_all(colnames(df), "_", " ") |> str_to_title()
    df
}

#Exploratory Questions

#Q4
top_by_category <- GLOBAL_TOP_10 |>
  group_by(category, show_title) |>
  summarize(total_hours = sum(weekly_hours_viewed, na.rm = TRUE), .groups = "drop_last") |>
  slice_max(total_hours, n = 1, with_ties = FALSE) |>
  ungroup() |>
  rename(
    Category = category,
    `Show Title` = show_title,
    `Total Hours` = total_hours
  )

datatable(
  top_by_category,
  options = list(
    dom = 't',
    paging = FALSE,
    ordering = FALSE,
    info = FALSE
  ),
  rownames = FALSE
) |>
  formatRound("Total Hours", 0)
  
```





* 5. **“Money Heist”** had the longest run in a country’s Top 10, spending **127 weeks** in Pakistan’s Top 10 chart. 

```{r, echo=TRUE, message=FALSE, warning=FALSE}
#Load Packages

if(!require("tidyverse")) install.packages("tidyverse")
library(readr)
library(dplyr)
library(stringr)
library(DT)

#Acquire Data

if(!dir.exists(file.path("data", "mp01"))){
    dir.create(file.path("data", "mp01"), showWarnings=FALSE, recursive=TRUE)
}

COUNTRY_TOP_10_FILENAME <- file.path("data", "mp01", "country_top10_alltime.csv")

if(!file.exists(COUNTRY_TOP_10_FILENAME)){
    download.file("https://www.netflix.com/tudum/top10/data/all-weeks-countries.tsv", 
                  destfile=COUNTRY_TOP_10_FILENAME)
}

#Read files



COUNTRY_TOP_10 <- read_tsv(
  COUNTRY_TOP_10_FILENAME,na = "N/A", show_col_types = FALSE)


#Formatted


format_titles <- function(df){
    colnames(df) <- str_replace_all(colnames(df), "_", " ") |> str_to_title()
    df
}

#Exploratory Questions

#Q5
top_tv_cum <- COUNTRY_TOP_10 |>
  filter(str_detect(category, "^TV")) |>           
  slice_max(cumulative_weeks_in_top_10, n = 1, with_ties = FALSE) |>  
  select(country_name, show_title, cumulative_weeks_in_top_10) |>     
  format_titles()                                 

DT::datatable(
  top_tv_cum,
  options = list(
    dom = 't',
    paging = FALSE,
    ordering = FALSE,
    info = FALSE
  ),
  rownames = FALSE
) 
```





* 6.**Russia** had only 35 weeks of Top 10 data, when **reporting ended on February 27, 2022**.

```{r, echo=TRUE, message=FALSE, warning=FALSE}

country_week_counts <- COUNTRY_TOP_10 |>
  mutate(week = as.Date(week)) |>
  summarize(
    weeks_available = dplyr::n_distinct(week),
    last_week_with_data = max(week, na.rm = TRUE),
    .by = country_name
  ) |>
  slice_min(weeks_available, n = 1, with_ties = FALSE) |>   # 가장 작은 1개만 선택
  rename(
    `Country Name` = country_name,
    `Weeks Available` = weeks_available,
    `Last Week With Data` = last_week_with_data
  )

DT::datatable(
  country_week_counts,
  options = list(dom = 't', paging = FALSE, ordering = FALSE, info = FALSE),
  rownames = FALSE
)

```





* 7.The total global **viewership** of Squid Game across all three seasons is approximately **5.05 billion hours**.

```{r, echo=TRUE, message=FALSE, warning=FALSE}

sg_seasons_core <- GLOBAL_TOP_10 |>
  filter(str_detect(category, "^TV"),
         show_title == "Squid Game",
         !is.na(season_title)) |>
  group_by(season_title) |>
  summarize(`Total Hours` = sum(weekly_hours_viewed, na.rm = TRUE), .groups = "drop")

sg_seasons_core <- sg_seasons_core |>
  mutate(.season_num = suppressWarnings(as.integer(str_extract(season_title, "\\d+")))) |>
  arrange(.season_num, season_title) |>
  select(-.season_num)

sg_total_core <- sg_seasons_core |>
  summarize(season_title = "Grand Total",
            `Total Hours` = sum(`Total Hours`, na.rm = TRUE))


sg_pivot_core <- bind_rows(sg_seasons_core, sg_total_core) |>
  rename(Seasons = season_title)

DT::datatable(
  sg_pivot_core,
  options = list(dom='t', paging=FALSE, ordering=FALSE, info=FALSE),
  rownames = FALSE
) |>
  formatRound("Total Hours", 0)
```





* 8.In 2021, Red Notice was viewed approximately **201 million times** worldwide, based on its total of 396.7 million viewing hours and a runtime of 1 hour and 58 minutes.

```{r, echo=TRUE, message=FALSE, warning=FALSE}

runtime_hours <- 1 + 58/60


red_notice_views_2021 <- GLOBAL_TOP_10 |>
  filter(show_title == "Red Notice", year(week) == 2021) |>       
  summarize(
    `Total Hours Viewed` = sum(weekly_hours_viewed, na.rm = TRUE),
    `View Estimate` = round(`Total Hours Viewed` / runtime_hours, 0),
    .groups = "drop"
  )


DT::datatable(
  red_notice_views_2021,
  options = list(dom = 't', paging = FALSE, ordering = FALSE, info = FALSE),
  rownames = FALSE
) |>
  DT::formatRound(c("Total Hours Viewed", "View Estimate"), 0)

```





* 9.A total of **45 films** in the U.S. Netflix Top 10 did not debut at Number 1 but later rose to the top spot during their chart runs.
The most recent example is **Unknown Number: The High School Catfish**, which debuted at #4 and reached #1 in the week of September 7, 2025.
```{r, echo=TRUE, message=FALSE, warning=FALSE}

us_film_risers <- COUNTRY_TOP_10 |>
  filter(country_name == "United States",
         str_detect(category, "^Film")) |>
  arrange(show_title, week) |>
  group_by(show_title) |>
  summarize(
    debut_week      = min(week),
    debut_rank      = weekly_rank[which.min(week)],
    ever_no1        = any(weekly_rank == 1),
    first_week_at_1 = if (any(weekly_rank == 1))
                        min(week[weekly_rank == 1]) else as.Date(NA)
  ) |>
  ungroup() |>
  filter(ever_no1, debut_rank != 1) |>
  arrange(desc(debut_week))

n_films <- us_film_risers |> nrow()

most_recent <- us_film_risers |>
  arrange(desc(first_week_at_1)) |>
  slice(1) |>
  select(show_title, first_week_at_1)


us_film_risers |>
  select(-ever_no1) |>
  rename(
    "Show Title"       = show_title,
    "Debut Week"       = debut_week,
    "Debut Rank"       = debut_rank,
    "First Week at #1" = first_week_at_1
  ) |>
  mutate(Total_Films = n_films) |>
  DT::datatable(
    caption = htmltools::tags$caption(
      style = 'caption-side: top; text-align: left; font-weight: bold;',
      sprintf("Total films that debuted below #1 but later reached #1: %d films", n_films)
    ),
    options = list(
      dom = 't',
      paging = FALSE,
      ordering = TRUE,
      info = FALSE
    ),
    rownames = FALSE
  )

```





* 10. **Emily in Paris: Season 2** reached the Top 10 charts in the most countries during its debut week — appearing in the Top 10 in 94 countries for the week of December 26, 2021.
```{r, echo=TRUE, message=FALSE, warning=FALSE}
  
tv_debut_countries <- COUNTRY_TOP_10 |>
  filter(str_detect(category, "^TV")) |>
  group_by(show_title, season_title, country_name) |>
  summarize(debut_week = min(week), .groups = "drop") |>
  group_by(show_title, season_title, debut_week) |>
  summarize(n_countries = n_distinct(country_name), .groups = "drop") |>
  arrange(desc(n_countries)) |>
  rename(
    "Show Title" = show_title,
    "Season Title" = season_title,
    "Debut Week" = debut_week,
    "Number of Countries" = n_countries
  )

# Top TV show/season
top_tv_debut <- tv_debut_countries |>
  slice(1)

top_tv_debut |>
  DT::datatable(
    caption = htmltools::tags$caption(
      style = 'caption-side: top; text-align: left; font-weight: bold;',
      "TV show/season that charted in the most countries on its debut week"
    ),
    options = list(
      dom = 't',
      paging = FALSE,
      ordering = TRUE,
      info = FALSE
    ),
    rownames = FALSE
  )
```

# Press Release 1: Upcoming Season of Stranger Things

## The Final Countdown: Stranger Things Returns to Conquer the World Once More

With over 290 million viewing hours and a global legacy that outshines every English-language series, Netflix’s Stranger Things prepares for its grand finale.

As Netflix gears up for the release of Stranger Things Season 5 at the end of 2025, the series continues to stand as one of the platform’s most remarkable success stories. Across its first four seasons, Stranger Things amassed an incredible 296.8 million viewing hours, remaining in the Global Top 10 for a combined 50 weeks and captivating audiences in over 90 countries. Each new season expanded its global reach — with Season 4 alone spending 19 weeks in the Top 10 and reaching viewers across 93 nations. Compared with other major English-language hits like Wednesday and Bridgerton, Stranger Things remains Netflix’s #1 most-watched show of all time, proving its unmatched power to unite fans across generations and continents. With anticipation at an all-time high, the final season is expected to shatter streaming records once again and reinforce Netflix’s dominance in global entertainment.

```{r, echo=TRUE, message=FALSE, warning=FALSE}

#Load Packages

if(!require("tidyverse")) install.packages("tidyverse")
library(readr)
library(dplyr)
library(stringr)
library(DT)

#Acquire Data

if(!dir.exists(file.path("data", "mp01"))){
    dir.create(file.path("data", "mp01"), showWarnings=FALSE, recursive=TRUE)
}

GLOBAL_TOP_10_FILENAME <- file.path("data", "mp01", "global_top10_alltime.csv")

if(!file.exists(GLOBAL_TOP_10_FILENAME)){
    download.file("https://www.netflix.com/tudum/top10/data/all-weeks-global.tsv", 
                  destfile=GLOBAL_TOP_10_FILENAME)
}

COUNTRY_TOP_10_FILENAME <- file.path("data", "mp01", "country_top10_alltime.csv")

if(!file.exists(COUNTRY_TOP_10_FILENAME)){
    download.file("https://www.netflix.com/tudum/top10/data/all-weeks-countries.tsv", 
                  destfile=COUNTRY_TOP_10_FILENAME)
}

#Read files

GLOBAL_TOP_10 <- read_tsv(
  GLOBAL_TOP_10_FILENAME, na = "N/A", show_col_types = FALSE)

COUNTRY_TOP_10 <- read_tsv(
  COUNTRY_TOP_10_FILENAME,na = "N/A", show_col_types = FALSE)


#Formatted


format_titles <- function(df){
    colnames(df) <- str_replace_all(colnames(df), "_", " ") |> str_to_title()
    df
}

#Season 1~4
# ---------- Helper: parse season number (N/A -> Season 1) ----------
parse_st_season <- function(season_title) {
  s <- str_extract(season_title %||% "", "\\d+")
  ifelse(is.na(s) | season_title %in% c("N/A", "NA", ""), 1L, as.integer(s))
}

# ---------- Filter Stranger Things (TV), build season_no & clean labels ----------
st_global_raw <- GLOBAL_TOP_10 |>
  filter(str_detect(category, "^TV"),
         show_title == "Stranger Things") |>
  mutate(season_no = parse_st_season(season_title),
         season_label = paste0("Stranger Things: Season ", season_no)) |>
  filter(season_no %in% 1:4)

st_country_raw <- COUNTRY_TOP_10 |>
  filter(str_detect(category, "^TV"),
         show_title == "Stranger Things") |>
  mutate(season_no = parse_st_season(season_title),
         season_label = paste0("Stranger Things: Season ", season_no)) |>
  filter(season_no %in% 1:4)

# ---------- 1) Total hours & weeks in global Top 10 (by season) ----------
st_global <- st_global_raw |>
  group_by(season_no, season_label) |>
  summarize(
    total_hours_viewed    = sum(weekly_hours_viewed, na.rm = TRUE),
    weeks_in_global_top10 = n_distinct(week),
    .groups = "drop"
  )

# ---------- 2) Countries where each season charted at least once ----------
st_countries <- st_country_raw |>
  group_by(season_no, season_label) |>
  summarize(
    countries_ever_charted = n_distinct(country_name),
    .groups = "drop"
  )

# ---------- 3) Multinational appeal of *previous* seasons ----------
#     = number of distinct countries that charted any earlier season
countries_by_season <- st_country_raw |>
  distinct(season_no, country_name) |>
  group_by(season_no) |>
  summarize(countries = list(unique(country_name)), .groups = "drop")

prior_counts <- tibble(season_no = 1:4) |>
  mutate(
    prior_countries = map_int(
      season_no,
      ~ {
        earlier <- countries_by_season |>
          filter(season_no < .x)
        length(unique(unlist(earlier$countries)))
      }
    )
  )

# ---------- 4) Combine & present ----------
st_summary <- st_global |>
  left_join(st_countries, by = c("season_no", "season_label")) |>
  left_join(prior_counts,  by = "season_no") |>
  arrange(season_no) |>
  rename(
    `Season No`               = season_no,
    `Season Title`            = season_label,
    `Total Hours Viewed`      = total_hours_viewed,
    `Weeks in Global Top 10`  = weeks_in_global_top10,
    `Countries Charted`       = countries_ever_charted,
    `Countries (Prior Seasons)` = prior_countries
  )

DT::datatable(
  st_summary |>
    select(-`Countries (Prior Seasons)`), 
  caption = htmltools::tags$caption(
    style = 'caption-side: top; text-align: left; font-weight: bold;',
    "Stranger Things S1–S4: Global Hours, Longevity, and Multinational Reach"
  ),
  options = list(
    dom = 't',
    paging = FALSE,
    ordering = TRUE,
    info = FALSE
  ),
  rownames = FALSE
)


#Comparison with other programs

# 1) English-language TV only (global table)
tv_en_global <- GLOBAL_TOP_10 |>
  filter(str_detect(category, "^TV \\(English\\)"))

# 2) Aggregate by show (across all seasons)
#    - total_hours_viewed: sum of viewing hours
#    - weeks_in_global_top10: distinct weeks the show (any season) appeared
tv_en_summary <- tv_en_global |>
  group_by(show_title) |>
  summarize(
    total_hours_viewed = sum(weekly_hours_viewed, na.rm = TRUE),
    weeks_in_global_top10 = n_distinct(week),
    .groups = "drop"
  )

# 3) Pick the comparison set:
#    - Stranger Things
#    - Top 3 other English-language TV shows by total_hours_viewed
st_row <- tv_en_summary |>
  filter(show_title == "Stranger Things")

top3_others <- tv_en_summary |>
  filter(show_title != "Stranger Things") |>
  slice_max(total_hours_viewed, n = 3)

compare_tbl <- bind_rows(st_row, top3_others) |>
  arrange(desc(total_hours_viewed)) |>
  mutate(
    rank_by_hours = row_number(),
    share_vs_total = total_hours_viewed / sum(total_hours_viewed)
  )

# 4) Pretty column names + table
compare_tbl |>
  rename(
    `Show Title` = show_title,
    `Total Hours Viewed` = total_hours_viewed,
    `Weeks in Global Top 10` = weeks_in_global_top10,
    `Rank (by Hours)` = rank_by_hours
  ) |>
  select(`Show Title`, `Rank (by Hours)`, `Total Hours Viewed`, `Weeks in Global Top 10`) |>  # ✅ 순서 조정 및 Share 열 제거
  DT::datatable(
    caption = htmltools::tags$caption(
      style = 'caption-side: top; text-align: left; font-weight: bold;',
      "Stranger Things vs. Top English-Language TV Shows (Global)"
    ),
    options = list(
      dom = 't',
      paging = FALSE,
      ordering = TRUE,
      info = FALSE
    ),
    rownames = FALSE
  )
```
